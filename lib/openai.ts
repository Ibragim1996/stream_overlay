// lib/openai.ts
import OpenAI from 'openai';

/** –û–±—â–∏–µ —Ç–∏–ø—ã (—Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ñ—Ä–æ–Ω—Ç–æ–º) */
export type Mode = 'funny' | 'motivator' | 'serious' | 'chill';
export type TaskType = 'question' | 'challenge' | 'just_talk' | 'joke';
export type StreamKind = 'just_chat' | 'irl' | 'gaming' | 'music' | 'cooking';
export type Lang = 'en' | 'ru' | 'es';

export const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

/** –ú—è–≥–∫–∏–π helper: 1 —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫/–ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫/–ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ */
function sanitizeOneLine(s: string): string {
  let out = s.replace(/\r?\n+/g, ' ').trim();
  out = out.replace(/^["'`]+|["'`]+$/g, '').trim();
  return out.replace(/\s{2,}/g, ' ');
}

/** –ß—É—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ —Ç–æ–Ω—É */
function temperatureFor(mode: Mode): number {
  if (mode === 'serious') return 0.45;
  if (mode === 'chill') return 0.6;
  if (mode === 'motivator') return 0.7;
  return 0.8; // funny
}

/** –ú—ç–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ–¥ —Ç–æ–Ω */
function toneHint(mode: Mode, lang: Lang): string {
  const byLang: Record<Lang, Record<Mode, string>> = {
    en: {
      funny: 'light, witty, a bit cheeky but kind',
      motivator: 'supportive, high-energy, hype but respectful',
      serious: 'calm, focused, concise',
      chill: 'relaxed, low-effort, cozy vibe',
    },
    ru: {
      funny: '—Å–º–µ—à–Ω–æ, –æ—Å—Ç—Ä–æ—É–º–Ω–æ, —Å–ª–µ–≥–∫–∞ –¥–µ—Ä–∑–∫–æ, –Ω–æ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ',
      motivator: '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ',
      serious: '—Å–ø–æ–∫–æ–π–Ω–æ, –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ',
      chill: '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ, –ø–æ-–¥–æ–º–∞—à–Ω–µ–º—É, –±–µ–∑ –Ω–∞–ø—Ä—è–≥–∞',
    },
    es: {
      funny: 'ligero, ingenioso, un poco p√≠caro pero amable',
      motivator: 'apoyo, energ√≠a alta, respetuoso',
      serious: 'calmado, enfocado, conciso',
      chill: 'relajado, c√≥modo, sin esfuerzo',
    },
  };
  return byLang[lang][mode];
}

/** –ö–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã/–ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π */
function rulesFor(taskType: TaskType, lang: Lang): string {
  const t = {
    en: {
      question:
        'Ask 1 short, engaging question. Address the streamer **and optionally** the chat. No tasks inside, only a question.',
      challenge:
        'Give 1 fun, doable challenge for the streamer only. It should be camera-visible or audible.',
      just_talk:
        'Suggest 1 small talk topic or icebreaker to keep the flow going. It should feel natural.',
      joke:
        'Make 1 quick, clean joke or playful roast (kind, not offensive).',
    },
    ru: {
      question:
        '–ó–∞–¥–∞–π 1 –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –û–±—Ä–∞—Ç–∏—Å—å –∫ —Å—Ç—Ä–∏–º–µ—Ä—É **–∏, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏,** –∫ —á–∞—Ç—É. –ë–µ–∑ –∑–∞–¥–∞–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å.',
      challenge:
        '–î–∞–π 1 –≤–µ—Å—ë–ª—ã–π –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–π —á–µ–ª–µ–Ω–¥–∂ **—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∏–º–µ—Ä—É**. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ—Ç–µ–Ω –≤ –∫–∞–¥—Ä–µ –∏–ª–∏ –ø–æ –∑–≤—É–∫—É.',
      just_talk:
        '–ü—Ä–µ–¥–ª–æ–∂–∏ 1 —Ç–µ–º—É –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏–ª–∏ –∞–π—Å–±—Ä–µ–π–∫–µ—Ä. –î–æ–ª–∂–Ω–æ –∑–≤—É—á–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.',
      joke:
        '–°–¥–µ–ª–∞–π 1 –∫–æ—Ä–æ—Ç–∫—É—é, —á–∏—Å—Ç—É—é —à—É—Ç–∫—É –∏–ª–∏ –¥–æ–±—Ä—ã–π –ª—ë–≥–∫–∏–π ¬´—Ä–æ–∞—Å—Ç¬ª (–±–µ–∑ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π).',
    },
    es: {
      question:
        'Haz 1 pregunta corta y atractiva. Dir√≠gete al streamer **y si quieres** al chat. Sin tareas dentro, solo pregunta.',
      challenge:
        'Prop√≥n 1 reto divertido y realizable **solo para el streamer**. Debe verse u o√≠rse en c√°mara.',
      just_talk:
        'Sugiere 1 tema breve para conversar, natural y fluido.',
      joke:
        'Cuenta 1 chiste corto y limpio o un roast suave (amable).',
    },
  };
  return t[lang][taskType];
}

/** –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∏–º–∞ */
function streamHint(kind: StreamKind, lang: Lang): string {
  const text: Record<Lang, Record<StreamKind, string>> = {
    en: {
      just_chat: 'desk / just chatting stream',
      irl: 'IRL / on the move',
      gaming: 'live gameplay going on',
      music: 'music stream',
      cooking: 'cooking on camera',
    },
    ru: {
      just_chat: '—Å—Ç—Ä–∏–º ¬´–ø—Ä–æ—Å—Ç–æ –æ–±—â–∞–µ–º—Å—è¬ª',
      irl: 'IRL / –≤ –¥–≤–∏–∂–µ–Ω–∏–∏',
      gaming: '–∏–¥—ë—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å',
      music: '–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º',
      cooking: '–≥–æ—Ç–æ–≤–∫–∞ –≤ –∫–∞–¥—Ä–µ',
    },
    es: {
      just_chat: 'charlando en el escritorio',
      irl: 'IRL / en movimiento',
      gaming: 'jugando en vivo',
      music: 'stream de m√∫sica',
      cooking: 'cocinando en c√°mara',
    },
  };
  return text[lang][kind];
}

export async function getTaskFromOpenAI(opts: {
  mode: Mode;
  taskType: TaskType;
  streamKind: StreamKind;
  lang: Lang;
  recent?: string[];
  streamer?: string;
  audience?: string; // twitch/youtube/etc ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
}): Promise<string> {
  const { mode, taskType, streamKind, lang, recent = [], streamer } = opts;

  const t = temperatureFor(mode);

  const messages: OpenAI.Chat.Completions.ChatCompletionMessageParam[] = [
    {
      role: 'system',
      content:
        'You generate a SINGLE, short line for a live-stream overlay. It must be emotionally engaging and natural.',
    },
    {
      role: 'system',
      content:
        'Hard rules: output ONE line only; <= 120 chars; no quotes; no hashtags; no emojis spam (0‚Äì1 emoji max); safe/TOS-friendly.',
    },
    {
      role: 'system',
      content:
        'Address BOTH streamer and chat ONLY for questions; all challenges are for the streamer only.',
    },
    {
      role: 'system',
      content:
        'Avoid repeating recent lines if possible; keep variety; no numbered lists; no leading labels.',
    },
    {
      role: 'system',
      content:
        `Language: ${lang}. Tone: ${toneHint(mode, lang)}. Stream context: ${streamHint(streamKind, lang)}.`,
    },
    {
      role: 'system',
      content: `Streamer name (optional): ${streamer || '‚Äî'}.`,
    },
    {
      role: 'user',
      content: `Task type is "${taskType}". ${rulesFor(taskType, lang)}`,
    },
  ];

  if (recent.length) {
    messages.push({
      role: 'system',
      content: `Recent lines to avoid repeating: ${recent.slice(0, 8).map((s) => `"${s}"`).join(', ')}`,
    });
  }

  messages.push({
    role: 'user',
    content:
      'Generate a NEW, distinct line that fits ALL rules above. Output only the line.',
  });

  const common = {
    temperature: t,
    max_tokens: 64,
    presence_penalty: 0.6,
    frequency_penalty: 0.65,
    messages,
  } as const;

  // –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã–∑–æ–≤
  try {
    const resp = await client.chat.completions.create({
      model: 'gpt-4o-mini',
      ...common,
    });
    const raw = resp.choices[0]?.message?.content ?? '';
    const clean = sanitizeOneLine(raw);
    if (clean) return clean;
  } catch {
    // ignore and try fallback
  }

  // –∑–∞–ø–∞—Å–Ω–∞—è –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –≤–¥—Ä—É–≥)
  try {
    const resp = await client.chat.completions.create({
      model: 'o4-mini',
      ...common,
    });
    const raw = resp.choices[0]?.message?.content ?? '';
    const clean = sanitizeOneLine(raw);
    if (clean) return clean;
  } catch {
    // ignore
  }

  // –∫—Ä–∞–π–Ω–µ–π —Å–ª—É—á–∞–π ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
  if (lang === 'ru') return '–£–ª—ã–±–Ω–∏—Å—å –≤ –∫–∞–º–µ—Ä—É –∏ —Å–ø—Ä–æ—Å–∏ —á–∞—Ç: –∫–∞–∫ —É –Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üôÇ';
  if (lang === 'es') return 'Sonr√≠e a la c√°mara y pregunta al chat c√≥mo va el √°nimo üôÇ';
  return 'Give the camera a quick smile and ask chat how they feel today üôÇ';
}